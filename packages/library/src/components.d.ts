/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TooltipAlignment } from "./components/tooltip/component";
import { HeadingLevel } from "./types/heading-level";
import { KoliBriAccordionCallbacks } from "./components/accordion/component";
import { AlertType, AlertVariant, KoliBriAlertEventCallbacks } from "./types/alert";
import { KoliBriColor } from "./components/badge/component";
import { Icofont } from "./types/icofont";
import { Alignment, KoliBriIconProp } from "./types/icon";
import { Stringified } from "./types/common";
import { NavLinkProps } from "./components/link/component";
import { AriaCurrent, ButtonProps, KoliBriButtonCallbacks, KoliBriButtonLinkShowAs, KoliBriButtonType, KoliBriButtonVariant, LinkOnCallbacks, LinkTarget, LinkUseCase } from "./types/button-link";
import { KoliBriFormCallbacks } from "./components/form/component";
import { FontAwesome, FontAwesomeOssPrefix } from "./enums/font-awesome";
import { KoliBriInputIcon } from "./components/input-text/types";
import { InputTypeOnDefault, InputTypeOnOff, Option, SelectOption } from "./types/input/types";
import { InputCheckboxType } from "./components/input-checkbox/types";
import { InputNumberType } from "./types/input/control/number";
import { Orientation } from "./types/orientation";
import { InputTextType } from "./types/input/control/text";
import { ListStyleType } from "./components/link-group/component";
import { Bundesamt, Bundesanstalt, Bundesministerium } from "./enums/bund";
import { KoliBriModalEventCallbacks } from "./types/modal";
import { KoliBriNavVariant, NavLinkWithChildrenProps } from "./components/nav/component";
import { PaginationHasButton } from "./components/pagination/component";
import { KoliBriPaginationButtonCallbacks } from "./components/pagination/types";
import { KoliBriProgressType } from "./types/progress";
import { KoliBriDataType, KoliBriTableHeaders, KoliBriTablePaginationProps } from "./types/table";
import { KoliBriTabsCallbacks, TabButtonProps } from "./components/tabs/component";
import { CSSResize } from "./components/textarea/types";
import { KoliBriToastEventCallbacks } from "./types/toast";
import { TooltipAlignment as TooltipAlignment1 } from "./components/tooltip/component";
export namespace Components {
    interface KolAbbr {
        /**
          * Dieses Property gibt die Beschreibung oder Erläuterung der Abkürzung an.
         */
        "_title": string;
        /**
          * Gibt an, ob der Tooltip entweder oben, rechts, unten oder links angezeigt werden soll.
         */
        "_tooltipAlign"?: TooltipAlignment;
    }
    interface KolAccordion {
        /**
          * Gibt die Überschrift des Accordions an.
         */
        "_heading": string;
        /**
          * Gibt an, welchen H-Level von 1 bis 6 die Überschrift hat.
         */
        "_level"?: HeadingLevel;
        /**
          * Gibt die EventCallback-Funktionen an.
         */
        "_on"?: KoliBriAccordionCallbacks;
        /**
          * Gibt an, ob das Accordion geöffnet ist.
         */
        "_open"?: boolean;
    }
    interface KolAlert {
        /**
          * Gibt an, ob der Screenreader die Meldung vorlesen soll.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob der Alert ein Schließen-Icon hat.
         */
        "_hasCloser"?: boolean;
        /**
          * Gibt den Titel der Meldung an.
         */
        "_heading"?: string;
        /**
          * Gibt an, welchen H-Level von 1 bis 6 die Überschrift hat.
         */
        "_level"?: HeadingLevel;
        /**
          * Gibt die EventCallback-Function für das Schließen des Alerts an.
         */
        "_on"?: KoliBriAlertEventCallbacks;
        /**
          * Gibt an, ob es sich um eine Erfolgs-, Info-, Warnung- oder Fehlermeldung handelt.
         */
        "_type"?: AlertType;
        /**
          * Gibt an, welche Benachrichtigungsvariante dargestellt wird.
         */
        "_variant"?: AlertVariant;
    }
    interface KolBadge {
        /**
          * Gibt die Farbe des Hintergrundes bzw. der Schrift an.
         */
        "_color"?: string | KoliBriColor;
        /**
          * Gibt einen Identifier eines Icons aus den Icofont's an. (https://icofont.com/)
         */
        "_icon"?: Icofont;
        /**
          * Gibt an, ob das Icon entweder links oder rechts dargestellt werden soll.
         */
        "_iconAlign"?: Alignment;
        /**
          * Gibt an, ob nur das Icon angezeigt wird.
         */
        "_iconOnly"?: boolean;
        /**
          * Gibt den Label-Text des Badges an.
         */
        "_label": string;
    }
    interface KolBreadcrumb {
        /**
          * Gibt den Text an, der die Navigation von anderen Navigationen differenziert.
         */
        "_ariaLabel": string;
        /**
          * Gibt die geordnete Liste der Seitenhierarchie in Links an.
         */
        "_links": Stringified<NavLinkProps[]>;
    }
    interface KolButton {
        /**
          * Gibt an, mit welcher Tastenkombination man den Button auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, welche Elemente kontrolliert werden.  (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Gibt an, welchen aktuellen Auswahlstatus der Button hat. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current)
         */
        "_ariaCurrent"?: AriaCurrent;
        /**
          * Gibt an, ob durch den Button etwas aufgeklappt wurde. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
         */
        "_ariaExpanded"?: boolean;
        /**
          * Gibt einen beschreibenden Text des Buttons an.  (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)
         */
        "_ariaLabel"?: string;
        /**
          * Gibt an, welche Custom-Class übergeben werden soll, wenn _variant="custom" gesetzt ist.
         */
        "_customClass"?: string;
        /**
          * Gibt an, ob der Button deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Class-Identifier eines Icons eine eingebunden Icofont an. (z.B. https://icofont.com/)
         */
        "_icon"?: KoliBriIconProp;
        /**
          * Gibt an, ob das Icon links oder rechts dargestellt werden soll.
          * @deprecated
         */
        "_iconAlign"?: Alignment;
        /**
          * Gibt an, ob nur das Icon angezeigt wird.
         */
        "_iconOnly"?: boolean;
        /**
          * Gibt die ID der Schaltfläche an. (Selection, Testing)
         */
        "_id"?: string;
        /**
          * Gibt den Label für die Beschriftung der Schaltfläche an.
         */
        "_label": string;
        /**
          * Gibt die EventCallback-Funktionen für die Button-Events an.
         */
        "_on"?: KoliBriButtonCallbacks;
        /**
          * Gibt an, ob der Button als Button oder Link dargestellt werden soll.
         */
        "_showAs"?: KoliBriButtonLinkShowAs;
        /**
          * Gibt an, ob der Tooltip oben, rechts, unten oder links angezeigt werden soll.
         */
        "_tooltipAlign"?: TooltipAlignment;
        /**
          * Gibt an, welche Typ der Button hat.
         */
        "_type"?: KoliBriButtonType;
        /**
          * Gibt an, welche Ausprägung der Button hat.
         */
        "_variant"?: KoliBriButtonVariant;
        /**
          * Gibt die Referenz auf das interaktive Element in der Komponente zurück.
         */
        "getInteractiveElementRef": () => Promise<HTMLButtonElement | undefined>;
    }
    interface KolButtonGroup {
    }
    interface KolButtonWc {
        /**
          * Gibt an, mit welcher Tastenkombination man den Button auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, welche Elemente kontrolliert werden.  (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Gibt an, welchen aktuellen Auswahlstatus der Button hat. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current)
         */
        "_ariaCurrent"?: AriaCurrent;
        /**
          * Gibt an, ob durch den Button etwas aufgeklappt wurde. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
         */
        "_ariaExpanded"?: boolean;
        /**
          * Gibt einen Text des Buttons für den Screenreader an. Für die Sprachsteuerung muss der Aria-Text mit dem Label-Text des Buttons beginnen. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)
         */
        "_ariaLabel"?: string;
        /**
          * Gibt an, welche Custom-Class übergeben werden soll, wenn _variant="custom" gesetzt ist.
         */
        "_customClass"?: string;
        /**
          * Gibt an, ob der Button deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Class-Identifier eines Icons eine eingebunden Icofont an. (z.B. https://icofont.com/)
         */
        "_icon"?: KoliBriIconProp;
        /**
          * Gibt an, ob das Icon links oder rechts dargestellt werden soll.
          * @deprecated
         */
        "_iconAlign"?: Alignment;
        /**
          * Gibt an, ob nur das Icon angezeigt wird.
         */
        "_iconOnly"?: boolean;
        /**
          * Gibt die ID der Schaltfläche an. (Selection, Testing)
         */
        "_id"?: string;
        /**
          * Gibt den Label für die Beschriftung der Schaltfläche an.
         */
        "_label": string;
        /**
          * Gibt die EventCallback-Funktionen für die Button-Events an.
         */
        "_on"?: KoliBriButtonCallbacks;
        /**
          * Gibt an, ob der Button als Button oder Link dargestellt werden soll.
         */
        "_showAs"?: KoliBriButtonLinkShowAs;
        /**
          * Gibt an, ob der Tooltip oben, rechts, unten oder links angezeigt werden soll.
         */
        "_tooltipAlign"?: TooltipAlignment;
        /**
          * Gibt an, welche Typ der Button hat.
         */
        "_type"?: KoliBriButtonType;
        /**
          * Gibt an, welche Ausprägung der Button hat.
         */
        "_variant"?: KoliBriButtonVariant;
        /**
          * Gibt die Referenz auf das interaktive Element in der Komponente zurück.
         */
        "getInteractiveElementRef": () => Promise<HTMLButtonElement | undefined>;
    }
    interface KolCard {
        /**
          * Gibt an, ob die Card einen Footer-Bereich hat.
         */
        "_hasFooter"?: boolean;
        /**
          * Gibt die Überschrift der Card an.
         */
        "_heading": string;
        /**
          * Gibt die Überschrift der Card an.
          * @deprecated Verwende stattdessen das Property _heading.
         */
        "_headline"?: string;
        /**
          * Gibt an, welchen H-Level von 1 bis 6 die Überschrift hat.
         */
        "_level"?: HeadingLevel;
    }
    interface KolColor {
    }
    interface KolCounter {
    }
    interface KolDetails {
        /**
          * Gibt an, ob die Detailbeschreibung geöffnet oder geschlossen ist.
         */
        "_open"?: boolean;
        /**
          * Gibt die Zusammenfassung der Detailbeschreibung an.
         */
        "_summary": string;
    }
    interface KolForm {
        /**
          * Gibt die EventCallback-Funktionen für die Form-Events an.
         */
        "_on"?: KoliBriFormCallbacks;
        /**
          * Gibt an, ob der Pflichtfeld-Hinweis eingeblendet werden soll.
         */
        "_requiredText"?: Stringified<boolean>;
    }
    interface KolHeading {
        /**
          * Gibt an, welchen H-Level von 1 bis 6 die Überschrift hat.
         */
        "_level"?: HeadingLevel;
    }
    interface KolHeadingWc {
        /**
          * Gibt an, welchen H-Level von 1 bis 6 die Überschrift hat.
         */
        "_level"?: HeadingLevel;
    }
    interface KolIcon {
        /**
          * Gibt das Aria-Label am Icon an.
         */
        "_ariaLabel": string;
        /**
          * Gibt einen Identifier eines Icons aus den Icon's an.
         */
        "_icon": string;
        /**
          * Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)
         */
        "_part"?: string;
    }
    interface KolIconFontAwesome {
        /**
          * Gibt das Aria-Label am Icon an.
         */
        "_ariaLabel": string;
        /**
          * Gibt einen Identifier eines Font Awesome Icons an. (https://fontawesome.com/v5.15/icons)
         */
        "_icon": FontAwesome;
        /**
          * Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)
         */
        "_part"?: string;
        /**
          * Gibt den Prefix der Font Awesome Icons an. (https://fontawesome.com/v5.15/how-to-use/on-the-web/referencing-icons/basic-use)
         */
        "_prefix": FontAwesomeOssPrefix;
    }
    interface KolIconIcofont {
        /**
          * Gibt das Aria-Label am Icon an.
         */
        "_ariaLabel": string;
        /**
          * Gibt einen Identifier eines Icofont Icons an. (https://icofont.com/icons)
         */
        "_icon": Icofont;
        /**
          * Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)
         */
        "_part"?: string;
    }
    interface KolIndentedText {
    }
    interface KolInput {
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: KoliBriInputIcon;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Vorschlagswörter an.
         */
        "_list"?: Stringified<string[]>;
        /**
          * Gibt an, ob die Eingabefeld nur lesend ist.
         */
        "_readOnly"?: boolean;
        /**
          * Gibt an, ob die Komponente kein Label rendern soll.
         */
        "_renderNoLabel"?: boolean;
        /**
          * Gibt an, ob die Checkbox ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Ermöglicht einen Schalter ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (nur Icon-Only).
         */
        "_smartButton"?: ButtonProps;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
    }
    interface KolInputAdapterLeanup {
    }
    interface KolInputCheckbox {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob die Checkbox ausgewählt ist oder nicht.
         */
        "_checked"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt an, ob die Checkbox weder ausgewählt noch nicht ausgewählt ist.
         */
        "_indeterminate"?: boolean;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt an, ob die Checkbox ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt an, welchen Type das Input haben soll.
         */
        "_type"?: InputCheckboxType;
        /**
          * Gibt den Wert der Checkbox an.
         */
        "_value"?: string;
    }
    interface KolInputColor {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld autovervollständigt werden kann.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Vorschlagswörter an.
         */
        "_list"?: Stringified<string[]>;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Ermöglicht einen Schalter ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (nur Icon-Only).
         */
        "_smartButton"?: ButtonProps;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: string;
    }
    interface KolInputEmail {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld autovervollständigt werden kann.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Vorschlagswörter an.
         */
        "_list"?: Stringified<string[]>;
        /**
          * Gibt an, wie viele Zeichen man maximal eingeben kann.
         */
        "_maxLength"?: number;
        /**
          * Gibt an, ob mehrere Werte eingegeben werden können.
         */
        "_multiple"?: boolean;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt ein Prüfpattern für das Eingabefeld an.
         */
        "_pattern"?: string;
        /**
          * Gibt den Platzhalter des Eingabefeldes an, wenn es leer ist.
         */
        "_placeholder"?: string;
        /**
          * Gibt an, ob das Eingabefeld nur lesend ist.
         */
        "_readOnly"?: boolean;
        /**
          * Gibt an, ob das Radio ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, wie viele Zeichen man eingeben kann.
         */
        "_size"?: number;
        /**
          * Ermöglicht einen Schalter ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (nur Icon-Only).
         */
        "_smartButton"?: ButtonProps;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: string;
    }
    interface KolInputFile {
        /**
          * Gibt an, welche Dateiformate erlaubt sind.
         */
        "_accept"?: string;
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt an, ob mehrere Werte eingegeben werden können.
         */
        "_multiple"?: boolean;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt an, ob das Eingabefeld ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Ermöglicht einen Schalter ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (nur Icon-Only).
         */
        "_smartButton"?: ButtonProps;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: string;
    }
    interface KolInputNumber {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld autovervollständigt werden kann.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Vorschlagszahlen an.
         */
        "_list"?: Stringified<string[]>;
        /**
          * Gibt den größtmöglichen Zahlenwert an.
         */
        "_max"?: number;
        /**
          * Gibt den kleinstmöglichen Zahlenwert an.
         */
        "_min"?: number;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt den Platzhalter des Eingabefeldes an, wenn es leer ist.
         */
        "_placeholder"?: string;
        /**
          * Gibt an, ob das Eingabefeld nur lesend ist.
         */
        "_readOnly"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Ermöglicht einen Schalter ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (nur Icon-Only).
         */
        "_smartButton"?: ButtonProps;
        /**
          * Gibt die Schrittweite der Wertveränderung an
         */
        "_step"?: number;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt an, ob es ein DateTime-, Date-, Month-, Week-, Time-, DateTime-Local-, Number-Eingabefeld ist.
         */
        "_type"?: InputNumberType;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: string;
    }
    interface KolInputPassword {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld autovervollständigt werden kann.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt an, wie viele Zeichen man maximal eingeben kann.
         */
        "_maxLength"?: number;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt ein Prüfpattern für das Eingabefeld an.
         */
        "_pattern"?: string;
        /**
          * Gibt den Platzhalter des Eingabefeldes an, wenn es leer ist.
         */
        "_placeholder"?: string;
        /**
          * Gibt an, ob die Eingabefeld nur lesend ist.
         */
        "_readOnly"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, wie viele Zeichen man eingeben kann.
         */
        "_size"?: number;
        /**
          * Ermöglicht einen Schalter ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (nur Icon-Only).
         */
        "_smartButton"?: ButtonProps;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: string;
    }
    interface KolInputRadio {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Optionen für das Eingabefeld an.
         */
        "_list": Stringified<Option<unknown>[]>;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt die Ausrichtung der LinkList an.
         */
        "_orientation"?: Orientation;
        /**
          * Gibt an, ob das Eingabefeld ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert der Radio an.
         */
        "_value"?: string;
    }
    interface KolInputRadioGroup {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Optionen für das Eingabefeld an.
         */
        "_list": Stringified<Option<unknown>[]>;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt die Ausrichtung der LinkList an.
         */
        "_orientation"?: Orientation;
        /**
          * Gibt an, ob das Eingabefeld ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert der Radio an.
         */
        "_value"?: string;
    }
    interface KolInputRange {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld autovervollständigt werden kann.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Vorschlagswörter an.
         */
        "_list"?: Stringified<Option<number>[]>;
        /**
          * Gibt den Maximalwert des Eingabefeldes an.
         */
        "_max"?: number;
        /**
          * Gibt den Minimalwert des Eingabefeldes an.
         */
        "_min"?: number;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt die Schrittweite der Wertveränderung an.
         */
        "_step"?: number;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: number;
    }
    interface KolInputText {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld autovervollständigt werden kann.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Vorschlagswörter an.
         */
        "_list"?: Stringified<string[]>;
        /**
          * Gibt an, wie viele Zeichen man maximal eingeben kann.
         */
        "_maxLength"?: number;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt ein Prüfpattern für das Eingabefeld an.
         */
        "_pattern"?: string;
        /**
          * Gibt den Platzhalter des Eingabefeldes an, wenn es leer ist.
         */
        "_placeholder"?: string;
        /**
          * Gibt an, ob die Eingabefeld nur lesend ist.
         */
        "_readOnly"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, wie viele Zeichen man eingeben kann.
         */
        "_size"?: number;
        /**
          * Ermöglicht einen Schalter ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (nur Icon-Only).
         */
        "_smartButton"?: ButtonProps;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt an, ob es ein Text-, Suche-, URL- oder Telefon-Eingabefeld ist.
         */
        "_type"?: InputTextType;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: string;
    }
    interface KolKolibri {
        /**
          * Gibt an, ob das Bild-Logo farblich animiert werden soll.
         */
        "_animate"?: boolean;
        /**
          * Gibt an, in welcher Farbe das Bild-Logo initial dargestellt werden soll.
         */
        "_color"?: string;
        /**
          * Gibt an, ob die Logo-Beschriftung angezeigt werden soll.
         */
        "_labeled"?: boolean;
    }
    interface KolLink {
        /**
          * Gibt an, welche Elemente kontrolliert werden.  (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Gibt an, welchen aktuellen Auswahlstatus der Link hat. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current)
         */
        "_ariaCurrent"?: AriaCurrent;
        /**
          * Gibt an, ob durch den Link etwas aufgeklappt wurde. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
         */
        "_ariaExpanded"?: boolean;
        /**
          * Gibt einen beschreibenden Text des Links an.  (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)
         */
        "_ariaLabel"?: string;
        /**
          * Gibt an, ob der Link gerade ausgewählt ist. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected)
         */
        "_ariaSelected"?: boolean;
        /**
          * Gibt an, ob der Link deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt an, ob der Link die gesamte zur Verfügung stehende Breite ausfüllt.
         */
        "_fill"?: boolean;
        /**
          * Gibt die Ziel-Url des Links an.
         */
        "_href"?: string;
        /**
          * Gibt den Class-Identifier eines Icons eine eingebunden Icofont an. (z.B. https://icofont.com/)
         */
        "_icon"?: KoliBriIconProp;
        /**
          * Gibt an, ob das Icon entweder links oder rechts dargestellt werden soll.
          * @deprecated
         */
        "_iconAlign"?: Alignment;
        /**
          * Gibt an, ob nur das Icon angezeigt wird.
         */
        "_iconOnly"?: boolean;
        /**
          * Gibt die EventCallback-Funktionen für den Link an.
         */
        "_on"?: LinkOnCallbacks;
        /**
          * Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)
         */
        "_part"?: string;
        /**
          * Gibt die ID eines DOM-Elements, zu dem gesprungen werden soll, aus.
         */
        "_selector"?: string;
        /**
          * Gibt an, ob der Link als Link oder Button dargestellt werden soll.
         */
        "_showAs"?: KoliBriButtonLinkShowAs;
        /**
          * Gibt an, ob der Link nur beim Fokus sichtbar ist.
         */
        "_stealth"?: boolean;
        /**
          * Definiert das Verhalten, bei dem der Link geöffnet werden soll.
         */
        "_target"?: LinkTarget;
        /**
          * Gibt die Beschreibung an, wenn der Link in einem anderen Programm geöffnet wird.
         */
        "_targetDescription"?: string;
        /**
          * Gibt an, ob der Tooltip entweder oben, rechts, unten oder links angezeigt werden soll.
         */
        "_tooltipAlign"?: TooltipAlignment;
        /**
          * Gibt an, ob die Links unterstrichen dargestellt werden.
         */
        "_underline"?: boolean;
        /**
          * Gibt den Verwendungsfall des Links an.
         */
        "_useCase"?: LinkUseCase;
    }
    interface KolLinkGroup {
        /**
          * Gibt den Text an, der die Navigation von anderen Navigationen differenziert.
         */
        "_ariaLabel": string;
        /**
          * Gibt die optionale Überschrift zur Link-Gruppe an.
         */
        "_heading"?: string;
        /**
          * Gibt die geordnete Liste der Seitenhierarchie in Links an.
         */
        "_level"?: HeadingLevel;
        /**
          * Gibt die geordnete Liste der Seitenhierarchie in Links an.
         */
        "_links": Stringified<NavLinkProps[]>;
        /**
          * Gibt den List-Style-Typen für ungeordnete Listen aus. Wird bei horizontalen LinkGroups als Trenner verwendet
         */
        "_listStyleType"?: ListStyleType;
        /**
          * @deprecated Wird mittels der Property _list-style-type automatisch gesteuert. Gibt an, ob eine Ordered- oder eine Unordered-List verwendet werden soll.
         */
        "_ordered"?: boolean;
        /**
          * Gibt die Ausrichtung der LinkList an.
         */
        "_orientation"?: Orientation;
    }
    interface KolLinkWc {
        /**
          * Gibt an, welche Elemente kontrolliert werden.  (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Gibt an, welchen aktuellen Auswahlstatus der Link hat. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current)
         */
        "_ariaCurrent"?: AriaCurrent;
        /**
          * Gibt an, ob durch den Link etwas aufgeklappt wurde. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
         */
        "_ariaExpanded"?: boolean;
        /**
          * Gibt einen beschreibenden Text des Links an.  (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)
         */
        "_ariaLabel"?: string;
        /**
          * Gibt an, ob der Link gerade ausgewählt ist. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected)
         */
        "_ariaSelected"?: boolean;
        /**
          * Gibt an, ob der Link deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt an, ob der Link die gesamte zur Verfügung stehende Breite ausfüllt.
         */
        "_fill"?: boolean;
        /**
          * Gibt die Ziel-Url des Links an.
         */
        "_href"?: string;
        /**
          * Gibt den Class-Identifier eines Icons eine eingebunden Icofont an. (z.B. https://icofont.com/)
         */
        "_icon"?: KoliBriIconProp;
        /**
          * Gibt an, ob das Icon entweder links oder rechts dargestellt werden soll.
          * @deprecated
         */
        "_iconAlign"?: Alignment;
        /**
          * Gibt an, ob nur das Icon angezeigt wird.
         */
        "_iconOnly"?: boolean;
        /**
          * Gibt die EventCallback-Funktionen für den Link an.
         */
        "_on"?: LinkOnCallbacks;
        /**
          * Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)
         */
        "_part"?: string;
        /**
          * Gibt die ID eines DOM-Elements, zu dem gesprungen werden soll, aus.
         */
        "_selector"?: string;
        /**
          * Gibt an, ob der Link als Link oder Button dargestellt werden soll.
         */
        "_showAs"?: KoliBriButtonLinkShowAs;
        /**
          * Gibt an, ob der Link nur beim Fokus sichtbar ist.
         */
        "_stealth"?: boolean;
        /**
          * Definiert das Verhalten, bei dem der Link geöffnet werden soll.
         */
        "_target"?: LinkTarget;
        /**
          * Gibt die Beschreibung an, wenn der Link in einem anderen Programm geöffnet wird.
         */
        "_targetDescription"?: string;
        /**
          * Gibt an, ob der Tooltip entweder oben, rechts, unten oder links angezeigt werden soll.
         */
        "_tooltipAlign"?: TooltipAlignment;
        /**
          * Gibt an, ob die Links unterstrichen dargestellt werden.
         */
        "_underline"?: boolean;
        /**
          * Gibt den Verwendungsfall des Links an.
         */
        "_useCase"?: LinkUseCase;
    }
    interface KolLogo {
        /**
          * Gibt die Abkürzung eines Ministeriums, eines Amts oder einer Bundesanstalt an.
          * @deprecated Verwende stattdessen das Property _org.
         */
        "_abbr"?: Bundesministerium | Bundesamt | Bundesanstalt;
        /**
          * Gibt die Abkürzung eines Ministeriums, eines Amts oder einer Bundesanstalt an.
         */
        "_org": Bundesministerium | Bundesamt | Bundesanstalt;
    }
    interface KolModal {
        /**
          * Gibt die Referenz auf das auslösende HTML-Element an, wodurch das Modal geöffnet wurde.
         */
        "_activeElement"?: HTMLElement | null;
        /**
          * Gibt den Text an, der die Navigation von anderen Navigationen differenziert.
         */
        "_ariaLabel": string;
        /**
          * Gibt die EventCallback-Function für das Schließen des Modals an.
         */
        "_on"?: KoliBriModalEventCallbacks;
        /**
          * Gibt an, ob das Modal angezeigt wird.
         */
        "_show"?: boolean;
        /**
          * Gibt an, wie breit der Anzeigebereich sein soll (<= max-width: 100%).
         */
        "_width"?: string;
    }
    interface KolNav {
        /**
          * Gibt den Wert von aria-current an, der bei dem aktuellen Kontext innerhalb der Navigation verwendet werden soll.
         */
        "_ariaCurrentValue": AriaCurrent;
        /**
          * Gibt den Text an, der die Navigation von anderen Navigationen differenziert.
         */
        "_ariaLabel": string;
        /**
          * Gibt an, ob Knoten in der Navigation zusammengeklappt werden können. Ist standardmäßig aktiv.
         */
        "_collapsible"?: boolean;
        /**
          * Gibt an, ob die Navigation kompakt angezeigt wird.
         */
        "_compact"?: boolean;
        /**
          * Gibt an, ob die Navigation eine zusätzliche Schaltfläche zum Aus- und Einklappen der Navigation anzeigen soll.
         */
        "_hasCompactButton"?: boolean;
        /**
          * Gibt die geordnete Liste der Seitenhierarchie an.
         */
        "_links": Stringified<NavLinkWithChildrenProps[]>;
        /**
          * Gibt die Ausrichtung der Navigation an.
         */
        "_orientation"?: Orientation;
        /**
          * Gibt an, welche Ausprägung der Button hat.
         */
        "_variant"?: KoliBriNavVariant;
    }
    interface KolPagination {
        /**
          * Gibt an, wie viele Seiten neben den am Rand liegenden Pfeil-Schaltern angezeigt werden sollen.
         */
        "_boundaryCount"?: number;
        /**
          * Gibt an, welche Custom-Class übergeben werden soll, wenn _variant="custom" gesetzt ist.
         */
        "_customClass"?: string;
        /**
          * Gibt an, welche Sprung-Schalter sichtbar sein sollen.
         */
        "_hasButtons"?: boolean | Stringified<PaginationHasButton>;
        /**
          * Gibt an, auf welche Callback-Events reagiert werden.
         */
        "_on": KoliBriPaginationButtonCallbacks;
        /**
          * Gibt an, welche Seite aktuell ausgewählt ist.
         */
        "_page": number;
        /**
          * Gibt an, wie viele Einträge pro Seite angezeigt werden.
         */
        "_pageSize": number;
        /**
          * Gibt an, welche Optionen für die Seitenlänge angeboten werden.
         */
        "_pageSizeOptions": Stringified<number[]>;
        /**
          * Gibt an, wie viele Seiten neben dem aktuell ausgewählten Seite angezeigt werden.
         */
        "_siblingCount"?: number;
        /**
          * Gibt an, ob der Tooltip oben, rechts, unten oder links angezeigt werden.
         */
        "_tooltipAlign"?: TooltipAlignment;
        /**
          * Gibt an, wie viele Einträge mit der Pagination gehandelt werden.
         */
        "_total": number;
        /**
          * Gibt an, welche Button-Variante verwendet werden soll.
         */
        "_variant"?: KoliBriButtonVariant;
    }
    interface KolProgress {
        /**
          * Gibt an, bei welchem Wert die Fortschrittsanzeige abgeschlossen ist.
         */
        "_max": number;
        /**
          * Gibt an, ob der Prozess als Balken oder Kreis dargestellt wird.
         */
        "_type"?: KoliBriProgressType;
        /**
          * Gibt die Einheit der Fortschrittswerte an.
         */
        "_unit"?: string;
        /**
          * Gibt an, wie weit die Anzeige fortgeschritten ist.
         */
        "_value": number;
    }
    interface KolSelect {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob eine individuelle Höhe übergeben werden soll.
         */
        "_height"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_list": Stringified<SelectOption<unknown>[]>;
        /**
          * Gibt an, ob mehrere Werte eingegeben werden können.
         */
        "_multiple"?: boolean;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt an, ob die Selectbox ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, wie viele Optionen im Drop-Down-Menü sichtbar sein sollen.
         */
        "_size"?: number;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: Stringified<unknown[]>;
    }
    interface KolSkipNav {
        /**
          * Gibt den Text an, der die Navigation von anderen Navigationen differenziert.
         */
        "_ariaLabel": string;
        /**
          * Ist die Liste der unsichtbaren Links.
         */
        "_links": Stringified<NavLinkProps[]>;
    }
    interface KolSpin {
        /**
          * Gibt an, ob die Ladeanzeige eingeblendet wird oder nicht.
         */
        "_show"?: boolean;
    }
    interface KolSymbol {
        /**
          * Gibt an, was der Screenreader ausgeben soll
         */
        "_ariaLabel": string;
        /**
          * Dieses Property gibt den String an der angezeigt werden soll.
         */
        "_symbol": string;
    }
    interface KolTable {
        /**
          * Gibt den  Titel oder eine Legende mit Erklärungen zur Tabelle an.
         */
        "_caption": string;
        /**
          * Gibt die Daten an, die für die Erstellung der Tabelle verwendet werden.
         */
        "_data": Stringified<KoliBriDataType[]>;
        /**
          * Gibt die horizontalen und vertikalen Header für die Tabelle an.
         */
        "_headers": Stringified<KoliBriTableHeaders>;
        /**
          * Gibt an, die minimale Breite der Tabelle an.
         */
        "_minWidth"?: string;
        /**
          * Gibt an, ob die Daten geteilt in Seiten angezeigt wird.
         */
        "_pagination"?: boolean | Stringified<KoliBriTablePaginationProps>;
    }
    interface KolTabs {
        /**
          * Gibt den Text an, der die Navigation von anderen Navigationen differenziert.
         */
        "_ariaLabel": string;
        /**
          * Gibt die Liste der Callback-Funktionen an, die auf Events aufgerufen werden sollen.
         */
        "_on"?: KoliBriTabsCallbacks;
        /**
          * Gibt an, welches Tab selektiert sein soll.
         */
        "_selected"?: number;
        /**
          * Gibt die geordnete Liste der Seitenhierarchie in Links an.
         */
        "_tabs": Stringified<TabButtonProps[]>;
    }
    interface KolTextarea {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob am unteren Rand des Eingabefeldes die Anzahl der Zeichen angezeigt werden soll.
         */
        "_hasCounter"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt an, wie viele Zeichen man maximal eingeben kann.
         */
        "_maxLength"?: number;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt den Platzhalter des Eingabefeldes an, wenn es leer ist.
         */
        "_placeholder"?: string;
        /**
          * Gibt an, ob das Eingabefeld nur lesend ist.
         */
        "_readOnly"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, ob die Größe des Eingabefeldes geändert werden kann. (https://developer.mozilla.org/de/docs/Web/CSS/resize)
         */
        "_resize"?: CSSResize;
        /**
          * Gibt die Anzahl der anzuzeigenden Zeilen des Eingabefeldes an.
         */
        "_rows"?: number;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: string;
    }
    interface KolToast {
        /**
          * Gibt an, ob der Screenreader die Meldung vorlesen soll.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob der Toast ein Schließen-Icon hat.
         */
        "_hasCloser"?: boolean;
        /**
          * Gibt den Titel der Meldung an.
         */
        "_heading"?: string;
        /**
          * Gibt an, welchen H-Level von 1 bis 6 die Überschrift hat.
         */
        "_level"?: HeadingLevel;
        /**
          * Gibt die EventCallback-Function für das Schließen des Toasts an.
         */
        "_on"?: KoliBriToastEventCallbacks;
        /**
          * Gibt an, ob der Toast eingeblendet wird.
         */
        "_show"?: boolean;
        /**
          * Gibt an, wie viele Millisekunden der Toast eingeblendet werden soll.
         */
        "_showDuration"?: number;
        /**
          * Gibt an, ob es sich um eine Erfolgs-, Info-, Warnung- oder Fehlermeldung handelt.
         */
        "_type"?: AlertType;
    }
    interface KolTooltip {
        /**
          * Gibt an, ob der Tooltip oben, rechts, unten oder links angezeigt werden soll.
         */
        "_align"?: TooltipAlignment;
        /**
          * Gibt die ID an, wenn z.B. Aria-Labelledby (Link) verwendet wird.
         */
        "_id"?: string;
        /**
          * Das Label gibt an, welcher Text in dem Tooltip beim Fokussieren oder Maus-drüberfahren angezeigt wird.
         */
        "_label": string;
    }
    interface KolVersion {
        /**
          * Gibt die Versionsnummer als Text an.
         */
        "_version": string;
    }
}
declare global {
    interface HTMLKolAbbrElement extends Components.KolAbbr, HTMLStencilElement {
    }
    var HTMLKolAbbrElement: {
        prototype: HTMLKolAbbrElement;
        new (): HTMLKolAbbrElement;
    };
    interface HTMLKolAccordionElement extends Components.KolAccordion, HTMLStencilElement {
    }
    var HTMLKolAccordionElement: {
        prototype: HTMLKolAccordionElement;
        new (): HTMLKolAccordionElement;
    };
    interface HTMLKolAlertElement extends Components.KolAlert, HTMLStencilElement {
    }
    var HTMLKolAlertElement: {
        prototype: HTMLKolAlertElement;
        new (): HTMLKolAlertElement;
    };
    interface HTMLKolBadgeElement extends Components.KolBadge, HTMLStencilElement {
    }
    var HTMLKolBadgeElement: {
        prototype: HTMLKolBadgeElement;
        new (): HTMLKolBadgeElement;
    };
    interface HTMLKolBreadcrumbElement extends Components.KolBreadcrumb, HTMLStencilElement {
    }
    var HTMLKolBreadcrumbElement: {
        prototype: HTMLKolBreadcrumbElement;
        new (): HTMLKolBreadcrumbElement;
    };
    interface HTMLKolButtonElement extends Components.KolButton, HTMLStencilElement {
    }
    var HTMLKolButtonElement: {
        prototype: HTMLKolButtonElement;
        new (): HTMLKolButtonElement;
    };
    interface HTMLKolButtonGroupElement extends Components.KolButtonGroup, HTMLStencilElement {
    }
    var HTMLKolButtonGroupElement: {
        prototype: HTMLKolButtonGroupElement;
        new (): HTMLKolButtonGroupElement;
    };
    interface HTMLKolButtonWcElement extends Components.KolButtonWc, HTMLStencilElement {
    }
    var HTMLKolButtonWcElement: {
        prototype: HTMLKolButtonWcElement;
        new (): HTMLKolButtonWcElement;
    };
    interface HTMLKolCardElement extends Components.KolCard, HTMLStencilElement {
    }
    var HTMLKolCardElement: {
        prototype: HTMLKolCardElement;
        new (): HTMLKolCardElement;
    };
    interface HTMLKolColorElement extends Components.KolColor, HTMLStencilElement {
    }
    var HTMLKolColorElement: {
        prototype: HTMLKolColorElement;
        new (): HTMLKolColorElement;
    };
    interface HTMLKolCounterElement extends Components.KolCounter, HTMLStencilElement {
    }
    var HTMLKolCounterElement: {
        prototype: HTMLKolCounterElement;
        new (): HTMLKolCounterElement;
    };
    interface HTMLKolDetailsElement extends Components.KolDetails, HTMLStencilElement {
    }
    var HTMLKolDetailsElement: {
        prototype: HTMLKolDetailsElement;
        new (): HTMLKolDetailsElement;
    };
    interface HTMLKolFormElement extends Components.KolForm, HTMLStencilElement {
    }
    var HTMLKolFormElement: {
        prototype: HTMLKolFormElement;
        new (): HTMLKolFormElement;
    };
    interface HTMLKolHeadingElement extends Components.KolHeading, HTMLStencilElement {
    }
    var HTMLKolHeadingElement: {
        prototype: HTMLKolHeadingElement;
        new (): HTMLKolHeadingElement;
    };
    interface HTMLKolHeadingWcElement extends Components.KolHeadingWc, HTMLStencilElement {
    }
    var HTMLKolHeadingWcElement: {
        prototype: HTMLKolHeadingWcElement;
        new (): HTMLKolHeadingWcElement;
    };
    interface HTMLKolIconElement extends Components.KolIcon, HTMLStencilElement {
    }
    var HTMLKolIconElement: {
        prototype: HTMLKolIconElement;
        new (): HTMLKolIconElement;
    };
    interface HTMLKolIconFontAwesomeElement extends Components.KolIconFontAwesome, HTMLStencilElement {
    }
    var HTMLKolIconFontAwesomeElement: {
        prototype: HTMLKolIconFontAwesomeElement;
        new (): HTMLKolIconFontAwesomeElement;
    };
    interface HTMLKolIconIcofontElement extends Components.KolIconIcofont, HTMLStencilElement {
    }
    var HTMLKolIconIcofontElement: {
        prototype: HTMLKolIconIcofontElement;
        new (): HTMLKolIconIcofontElement;
    };
    interface HTMLKolIndentedTextElement extends Components.KolIndentedText, HTMLStencilElement {
    }
    var HTMLKolIndentedTextElement: {
        prototype: HTMLKolIndentedTextElement;
        new (): HTMLKolIndentedTextElement;
    };
    interface HTMLKolInputElement extends Components.KolInput, HTMLStencilElement {
    }
    var HTMLKolInputElement: {
        prototype: HTMLKolInputElement;
        new (): HTMLKolInputElement;
    };
    interface HTMLKolInputAdapterLeanupElement extends Components.KolInputAdapterLeanup, HTMLStencilElement {
    }
    var HTMLKolInputAdapterLeanupElement: {
        prototype: HTMLKolInputAdapterLeanupElement;
        new (): HTMLKolInputAdapterLeanupElement;
    };
    interface HTMLKolInputCheckboxElement extends Components.KolInputCheckbox, HTMLStencilElement {
    }
    var HTMLKolInputCheckboxElement: {
        prototype: HTMLKolInputCheckboxElement;
        new (): HTMLKolInputCheckboxElement;
    };
    interface HTMLKolInputColorElement extends Components.KolInputColor, HTMLStencilElement {
    }
    var HTMLKolInputColorElement: {
        prototype: HTMLKolInputColorElement;
        new (): HTMLKolInputColorElement;
    };
    interface HTMLKolInputEmailElement extends Components.KolInputEmail, HTMLStencilElement {
    }
    var HTMLKolInputEmailElement: {
        prototype: HTMLKolInputEmailElement;
        new (): HTMLKolInputEmailElement;
    };
    interface HTMLKolInputFileElement extends Components.KolInputFile, HTMLStencilElement {
    }
    var HTMLKolInputFileElement: {
        prototype: HTMLKolInputFileElement;
        new (): HTMLKolInputFileElement;
    };
    interface HTMLKolInputNumberElement extends Components.KolInputNumber, HTMLStencilElement {
    }
    var HTMLKolInputNumberElement: {
        prototype: HTMLKolInputNumberElement;
        new (): HTMLKolInputNumberElement;
    };
    interface HTMLKolInputPasswordElement extends Components.KolInputPassword, HTMLStencilElement {
    }
    var HTMLKolInputPasswordElement: {
        prototype: HTMLKolInputPasswordElement;
        new (): HTMLKolInputPasswordElement;
    };
    interface HTMLKolInputRadioElement extends Components.KolInputRadio, HTMLStencilElement {
    }
    var HTMLKolInputRadioElement: {
        prototype: HTMLKolInputRadioElement;
        new (): HTMLKolInputRadioElement;
    };
    interface HTMLKolInputRadioGroupElement extends Components.KolInputRadioGroup, HTMLStencilElement {
    }
    var HTMLKolInputRadioGroupElement: {
        prototype: HTMLKolInputRadioGroupElement;
        new (): HTMLKolInputRadioGroupElement;
    };
    interface HTMLKolInputRangeElement extends Components.KolInputRange, HTMLStencilElement {
    }
    var HTMLKolInputRangeElement: {
        prototype: HTMLKolInputRangeElement;
        new (): HTMLKolInputRangeElement;
    };
    interface HTMLKolInputTextElement extends Components.KolInputText, HTMLStencilElement {
    }
    var HTMLKolInputTextElement: {
        prototype: HTMLKolInputTextElement;
        new (): HTMLKolInputTextElement;
    };
    interface HTMLKolKolibriElement extends Components.KolKolibri, HTMLStencilElement {
    }
    var HTMLKolKolibriElement: {
        prototype: HTMLKolKolibriElement;
        new (): HTMLKolKolibriElement;
    };
    interface HTMLKolLinkElement extends Components.KolLink, HTMLStencilElement {
    }
    var HTMLKolLinkElement: {
        prototype: HTMLKolLinkElement;
        new (): HTMLKolLinkElement;
    };
    interface HTMLKolLinkGroupElement extends Components.KolLinkGroup, HTMLStencilElement {
    }
    var HTMLKolLinkGroupElement: {
        prototype: HTMLKolLinkGroupElement;
        new (): HTMLKolLinkGroupElement;
    };
    interface HTMLKolLinkWcElement extends Components.KolLinkWc, HTMLStencilElement {
    }
    var HTMLKolLinkWcElement: {
        prototype: HTMLKolLinkWcElement;
        new (): HTMLKolLinkWcElement;
    };
    interface HTMLKolLogoElement extends Components.KolLogo, HTMLStencilElement {
    }
    var HTMLKolLogoElement: {
        prototype: HTMLKolLogoElement;
        new (): HTMLKolLogoElement;
    };
    interface HTMLKolModalElement extends Components.KolModal, HTMLStencilElement {
    }
    var HTMLKolModalElement: {
        prototype: HTMLKolModalElement;
        new (): HTMLKolModalElement;
    };
    interface HTMLKolNavElement extends Components.KolNav, HTMLStencilElement {
    }
    var HTMLKolNavElement: {
        prototype: HTMLKolNavElement;
        new (): HTMLKolNavElement;
    };
    interface HTMLKolPaginationElement extends Components.KolPagination, HTMLStencilElement {
    }
    var HTMLKolPaginationElement: {
        prototype: HTMLKolPaginationElement;
        new (): HTMLKolPaginationElement;
    };
    interface HTMLKolProgressElement extends Components.KolProgress, HTMLStencilElement {
    }
    var HTMLKolProgressElement: {
        prototype: HTMLKolProgressElement;
        new (): HTMLKolProgressElement;
    };
    interface HTMLKolSelectElement extends Components.KolSelect, HTMLStencilElement {
    }
    var HTMLKolSelectElement: {
        prototype: HTMLKolSelectElement;
        new (): HTMLKolSelectElement;
    };
    interface HTMLKolSkipNavElement extends Components.KolSkipNav, HTMLStencilElement {
    }
    var HTMLKolSkipNavElement: {
        prototype: HTMLKolSkipNavElement;
        new (): HTMLKolSkipNavElement;
    };
    interface HTMLKolSpinElement extends Components.KolSpin, HTMLStencilElement {
    }
    var HTMLKolSpinElement: {
        prototype: HTMLKolSpinElement;
        new (): HTMLKolSpinElement;
    };
    interface HTMLKolSymbolElement extends Components.KolSymbol, HTMLStencilElement {
    }
    var HTMLKolSymbolElement: {
        prototype: HTMLKolSymbolElement;
        new (): HTMLKolSymbolElement;
    };
    interface HTMLKolTableElement extends Components.KolTable, HTMLStencilElement {
    }
    var HTMLKolTableElement: {
        prototype: HTMLKolTableElement;
        new (): HTMLKolTableElement;
    };
    interface HTMLKolTabsElement extends Components.KolTabs, HTMLStencilElement {
    }
    var HTMLKolTabsElement: {
        prototype: HTMLKolTabsElement;
        new (): HTMLKolTabsElement;
    };
    interface HTMLKolTextareaElement extends Components.KolTextarea, HTMLStencilElement {
    }
    var HTMLKolTextareaElement: {
        prototype: HTMLKolTextareaElement;
        new (): HTMLKolTextareaElement;
    };
    interface HTMLKolToastElement extends Components.KolToast, HTMLStencilElement {
    }
    var HTMLKolToastElement: {
        prototype: HTMLKolToastElement;
        new (): HTMLKolToastElement;
    };
    interface HTMLKolTooltipElement extends Components.KolTooltip, HTMLStencilElement {
    }
    var HTMLKolTooltipElement: {
        prototype: HTMLKolTooltipElement;
        new (): HTMLKolTooltipElement;
    };
    interface HTMLKolVersionElement extends Components.KolVersion, HTMLStencilElement {
    }
    var HTMLKolVersionElement: {
        prototype: HTMLKolVersionElement;
        new (): HTMLKolVersionElement;
    };
    interface HTMLElementTagNameMap {
        "kol-abbr": HTMLKolAbbrElement;
        "kol-accordion": HTMLKolAccordionElement;
        "kol-alert": HTMLKolAlertElement;
        "kol-badge": HTMLKolBadgeElement;
        "kol-breadcrumb": HTMLKolBreadcrumbElement;
        "kol-button": HTMLKolButtonElement;
        "kol-button-group": HTMLKolButtonGroupElement;
        "kol-button-wc": HTMLKolButtonWcElement;
        "kol-card": HTMLKolCardElement;
        "kol-color": HTMLKolColorElement;
        "kol-counter": HTMLKolCounterElement;
        "kol-details": HTMLKolDetailsElement;
        "kol-form": HTMLKolFormElement;
        "kol-heading": HTMLKolHeadingElement;
        "kol-heading-wc": HTMLKolHeadingWcElement;
        "kol-icon": HTMLKolIconElement;
        "kol-icon-font-awesome": HTMLKolIconFontAwesomeElement;
        "kol-icon-icofont": HTMLKolIconIcofontElement;
        "kol-indented-text": HTMLKolIndentedTextElement;
        "kol-input": HTMLKolInputElement;
        "kol-input-adapter-leanup": HTMLKolInputAdapterLeanupElement;
        "kol-input-checkbox": HTMLKolInputCheckboxElement;
        "kol-input-color": HTMLKolInputColorElement;
        "kol-input-email": HTMLKolInputEmailElement;
        "kol-input-file": HTMLKolInputFileElement;
        "kol-input-number": HTMLKolInputNumberElement;
        "kol-input-password": HTMLKolInputPasswordElement;
        "kol-input-radio": HTMLKolInputRadioElement;
        "kol-input-radio-group": HTMLKolInputRadioGroupElement;
        "kol-input-range": HTMLKolInputRangeElement;
        "kol-input-text": HTMLKolInputTextElement;
        "kol-kolibri": HTMLKolKolibriElement;
        "kol-link": HTMLKolLinkElement;
        "kol-link-group": HTMLKolLinkGroupElement;
        "kol-link-wc": HTMLKolLinkWcElement;
        "kol-logo": HTMLKolLogoElement;
        "kol-modal": HTMLKolModalElement;
        "kol-nav": HTMLKolNavElement;
        "kol-pagination": HTMLKolPaginationElement;
        "kol-progress": HTMLKolProgressElement;
        "kol-select": HTMLKolSelectElement;
        "kol-skip-nav": HTMLKolSkipNavElement;
        "kol-spin": HTMLKolSpinElement;
        "kol-symbol": HTMLKolSymbolElement;
        "kol-table": HTMLKolTableElement;
        "kol-tabs": HTMLKolTabsElement;
        "kol-textarea": HTMLKolTextareaElement;
        "kol-toast": HTMLKolToastElement;
        "kol-tooltip": HTMLKolTooltipElement;
        "kol-version": HTMLKolVersionElement;
    }
}
declare namespace LocalJSX {
    interface KolAbbr {
        /**
          * Dieses Property gibt die Beschreibung oder Erläuterung der Abkürzung an.
         */
        "_title": string;
        /**
          * Gibt an, ob der Tooltip entweder oben, rechts, unten oder links angezeigt werden soll.
         */
        "_tooltipAlign"?: TooltipAlignment;
    }
    interface KolAccordion {
        /**
          * Gibt die Überschrift des Accordions an.
         */
        "_heading": string;
        /**
          * Gibt an, welchen H-Level von 1 bis 6 die Überschrift hat.
         */
        "_level"?: HeadingLevel;
        /**
          * Gibt die EventCallback-Funktionen an.
         */
        "_on"?: KoliBriAccordionCallbacks;
        /**
          * Gibt an, ob das Accordion geöffnet ist.
         */
        "_open"?: boolean;
    }
    interface KolAlert {
        /**
          * Gibt an, ob der Screenreader die Meldung vorlesen soll.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob der Alert ein Schließen-Icon hat.
         */
        "_hasCloser"?: boolean;
        /**
          * Gibt den Titel der Meldung an.
         */
        "_heading"?: string;
        /**
          * Gibt an, welchen H-Level von 1 bis 6 die Überschrift hat.
         */
        "_level"?: HeadingLevel;
        /**
          * Gibt die EventCallback-Function für das Schließen des Alerts an.
         */
        "_on"?: KoliBriAlertEventCallbacks;
        /**
          * Gibt an, ob es sich um eine Erfolgs-, Info-, Warnung- oder Fehlermeldung handelt.
         */
        "_type"?: AlertType;
        /**
          * Gibt an, welche Benachrichtigungsvariante dargestellt wird.
         */
        "_variant"?: AlertVariant;
    }
    interface KolBadge {
        /**
          * Gibt die Farbe des Hintergrundes bzw. der Schrift an.
         */
        "_color"?: string | KoliBriColor;
        /**
          * Gibt einen Identifier eines Icons aus den Icofont's an. (https://icofont.com/)
         */
        "_icon"?: Icofont;
        /**
          * Gibt an, ob das Icon entweder links oder rechts dargestellt werden soll.
         */
        "_iconAlign"?: Alignment;
        /**
          * Gibt an, ob nur das Icon angezeigt wird.
         */
        "_iconOnly"?: boolean;
        /**
          * Gibt den Label-Text des Badges an.
         */
        "_label": string;
    }
    interface KolBreadcrumb {
        /**
          * Gibt den Text an, der die Navigation von anderen Navigationen differenziert.
         */
        "_ariaLabel": string;
        /**
          * Gibt die geordnete Liste der Seitenhierarchie in Links an.
         */
        "_links": Stringified<NavLinkProps[]>;
    }
    interface KolButton {
        /**
          * Gibt an, mit welcher Tastenkombination man den Button auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, welche Elemente kontrolliert werden.  (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Gibt an, welchen aktuellen Auswahlstatus der Button hat. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current)
         */
        "_ariaCurrent"?: AriaCurrent;
        /**
          * Gibt an, ob durch den Button etwas aufgeklappt wurde. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
         */
        "_ariaExpanded"?: boolean;
        /**
          * Gibt einen beschreibenden Text des Buttons an.  (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)
         */
        "_ariaLabel"?: string;
        /**
          * Gibt an, welche Custom-Class übergeben werden soll, wenn _variant="custom" gesetzt ist.
         */
        "_customClass"?: string;
        /**
          * Gibt an, ob der Button deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Class-Identifier eines Icons eine eingebunden Icofont an. (z.B. https://icofont.com/)
         */
        "_icon"?: KoliBriIconProp;
        /**
          * Gibt an, ob das Icon links oder rechts dargestellt werden soll.
          * @deprecated
         */
        "_iconAlign"?: Alignment;
        /**
          * Gibt an, ob nur das Icon angezeigt wird.
         */
        "_iconOnly"?: boolean;
        /**
          * Gibt die ID der Schaltfläche an. (Selection, Testing)
         */
        "_id"?: string;
        /**
          * Gibt den Label für die Beschriftung der Schaltfläche an.
         */
        "_label": string;
        /**
          * Gibt die EventCallback-Funktionen für die Button-Events an.
         */
        "_on"?: KoliBriButtonCallbacks;
        /**
          * Gibt an, ob der Button als Button oder Link dargestellt werden soll.
         */
        "_showAs"?: KoliBriButtonLinkShowAs;
        /**
          * Gibt an, ob der Tooltip oben, rechts, unten oder links angezeigt werden soll.
         */
        "_tooltipAlign"?: TooltipAlignment;
        /**
          * Gibt an, welche Typ der Button hat.
         */
        "_type"?: KoliBriButtonType;
        /**
          * Gibt an, welche Ausprägung der Button hat.
         */
        "_variant"?: KoliBriButtonVariant;
    }
    interface KolButtonGroup {
    }
    interface KolButtonWc {
        /**
          * Gibt an, mit welcher Tastenkombination man den Button auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, welche Elemente kontrolliert werden.  (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Gibt an, welchen aktuellen Auswahlstatus der Button hat. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current)
         */
        "_ariaCurrent"?: AriaCurrent;
        /**
          * Gibt an, ob durch den Button etwas aufgeklappt wurde. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
         */
        "_ariaExpanded"?: boolean;
        /**
          * Gibt einen Text des Buttons für den Screenreader an. Für die Sprachsteuerung muss der Aria-Text mit dem Label-Text des Buttons beginnen. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)
         */
        "_ariaLabel"?: string;
        /**
          * Gibt an, welche Custom-Class übergeben werden soll, wenn _variant="custom" gesetzt ist.
         */
        "_customClass"?: string;
        /**
          * Gibt an, ob der Button deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Class-Identifier eines Icons eine eingebunden Icofont an. (z.B. https://icofont.com/)
         */
        "_icon"?: KoliBriIconProp;
        /**
          * Gibt an, ob das Icon links oder rechts dargestellt werden soll.
          * @deprecated
         */
        "_iconAlign"?: Alignment;
        /**
          * Gibt an, ob nur das Icon angezeigt wird.
         */
        "_iconOnly"?: boolean;
        /**
          * Gibt die ID der Schaltfläche an. (Selection, Testing)
         */
        "_id"?: string;
        /**
          * Gibt den Label für die Beschriftung der Schaltfläche an.
         */
        "_label": string;
        /**
          * Gibt die EventCallback-Funktionen für die Button-Events an.
         */
        "_on"?: KoliBriButtonCallbacks;
        /**
          * Gibt an, ob der Button als Button oder Link dargestellt werden soll.
         */
        "_showAs"?: KoliBriButtonLinkShowAs;
        /**
          * Gibt an, ob der Tooltip oben, rechts, unten oder links angezeigt werden soll.
         */
        "_tooltipAlign"?: TooltipAlignment;
        /**
          * Gibt an, welche Typ der Button hat.
         */
        "_type"?: KoliBriButtonType;
        /**
          * Gibt an, welche Ausprägung der Button hat.
         */
        "_variant"?: KoliBriButtonVariant;
    }
    interface KolCard {
        /**
          * Gibt an, ob die Card einen Footer-Bereich hat.
         */
        "_hasFooter"?: boolean;
        /**
          * Gibt die Überschrift der Card an.
         */
        "_heading": string;
        /**
          * Gibt die Überschrift der Card an.
          * @deprecated Verwende stattdessen das Property _heading.
         */
        "_headline"?: string;
        /**
          * Gibt an, welchen H-Level von 1 bis 6 die Überschrift hat.
         */
        "_level"?: HeadingLevel;
    }
    interface KolColor {
    }
    interface KolCounter {
    }
    interface KolDetails {
        /**
          * Gibt an, ob die Detailbeschreibung geöffnet oder geschlossen ist.
         */
        "_open"?: boolean;
        /**
          * Gibt die Zusammenfassung der Detailbeschreibung an.
         */
        "_summary": string;
    }
    interface KolForm {
        /**
          * Gibt die EventCallback-Funktionen für die Form-Events an.
         */
        "_on"?: KoliBriFormCallbacks;
        /**
          * Gibt an, ob der Pflichtfeld-Hinweis eingeblendet werden soll.
         */
        "_requiredText"?: Stringified<boolean>;
    }
    interface KolHeading {
        /**
          * Gibt an, welchen H-Level von 1 bis 6 die Überschrift hat.
         */
        "_level"?: HeadingLevel;
    }
    interface KolHeadingWc {
        /**
          * Gibt an, welchen H-Level von 1 bis 6 die Überschrift hat.
         */
        "_level"?: HeadingLevel;
    }
    interface KolIcon {
        /**
          * Gibt das Aria-Label am Icon an.
         */
        "_ariaLabel": string;
        /**
          * Gibt einen Identifier eines Icons aus den Icon's an.
         */
        "_icon": string;
        /**
          * Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)
         */
        "_part"?: string;
    }
    interface KolIconFontAwesome {
        /**
          * Gibt das Aria-Label am Icon an.
         */
        "_ariaLabel": string;
        /**
          * Gibt einen Identifier eines Font Awesome Icons an. (https://fontawesome.com/v5.15/icons)
         */
        "_icon": FontAwesome;
        /**
          * Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)
         */
        "_part"?: string;
        /**
          * Gibt den Prefix der Font Awesome Icons an. (https://fontawesome.com/v5.15/how-to-use/on-the-web/referencing-icons/basic-use)
         */
        "_prefix": FontAwesomeOssPrefix;
    }
    interface KolIconIcofont {
        /**
          * Gibt das Aria-Label am Icon an.
         */
        "_ariaLabel": string;
        /**
          * Gibt einen Identifier eines Icofont Icons an. (https://icofont.com/icons)
         */
        "_icon": Icofont;
        /**
          * Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)
         */
        "_part"?: string;
    }
    interface KolIndentedText {
    }
    interface KolInput {
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: KoliBriInputIcon;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Vorschlagswörter an.
         */
        "_list"?: Stringified<string[]>;
        /**
          * Gibt an, ob die Eingabefeld nur lesend ist.
         */
        "_readOnly"?: boolean;
        /**
          * Gibt an, ob die Komponente kein Label rendern soll.
         */
        "_renderNoLabel"?: boolean;
        /**
          * Gibt an, ob die Checkbox ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Ermöglicht einen Schalter ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (nur Icon-Only).
         */
        "_smartButton"?: ButtonProps;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
    }
    interface KolInputAdapterLeanup {
    }
    interface KolInputCheckbox {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob die Checkbox ausgewählt ist oder nicht.
         */
        "_checked"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt an, ob die Checkbox weder ausgewählt noch nicht ausgewählt ist.
         */
        "_indeterminate"?: boolean;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt an, ob die Checkbox ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt an, welchen Type das Input haben soll.
         */
        "_type"?: InputCheckboxType;
        /**
          * Gibt den Wert der Checkbox an.
         */
        "_value"?: string;
    }
    interface KolInputColor {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld autovervollständigt werden kann.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Vorschlagswörter an.
         */
        "_list"?: Stringified<string[]>;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Ermöglicht einen Schalter ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (nur Icon-Only).
         */
        "_smartButton"?: ButtonProps;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: string;
    }
    interface KolInputEmail {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld autovervollständigt werden kann.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Vorschlagswörter an.
         */
        "_list"?: Stringified<string[]>;
        /**
          * Gibt an, wie viele Zeichen man maximal eingeben kann.
         */
        "_maxLength"?: number;
        /**
          * Gibt an, ob mehrere Werte eingegeben werden können.
         */
        "_multiple"?: boolean;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt ein Prüfpattern für das Eingabefeld an.
         */
        "_pattern"?: string;
        /**
          * Gibt den Platzhalter des Eingabefeldes an, wenn es leer ist.
         */
        "_placeholder"?: string;
        /**
          * Gibt an, ob das Eingabefeld nur lesend ist.
         */
        "_readOnly"?: boolean;
        /**
          * Gibt an, ob das Radio ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, wie viele Zeichen man eingeben kann.
         */
        "_size"?: number;
        /**
          * Ermöglicht einen Schalter ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (nur Icon-Only).
         */
        "_smartButton"?: ButtonProps;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: string;
    }
    interface KolInputFile {
        /**
          * Gibt an, welche Dateiformate erlaubt sind.
         */
        "_accept"?: string;
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt an, ob mehrere Werte eingegeben werden können.
         */
        "_multiple"?: boolean;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt an, ob das Eingabefeld ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Ermöglicht einen Schalter ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (nur Icon-Only).
         */
        "_smartButton"?: ButtonProps;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: string;
    }
    interface KolInputNumber {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld autovervollständigt werden kann.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Vorschlagszahlen an.
         */
        "_list"?: Stringified<string[]>;
        /**
          * Gibt den größtmöglichen Zahlenwert an.
         */
        "_max"?: number;
        /**
          * Gibt den kleinstmöglichen Zahlenwert an.
         */
        "_min"?: number;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt den Platzhalter des Eingabefeldes an, wenn es leer ist.
         */
        "_placeholder"?: string;
        /**
          * Gibt an, ob das Eingabefeld nur lesend ist.
         */
        "_readOnly"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Ermöglicht einen Schalter ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (nur Icon-Only).
         */
        "_smartButton"?: ButtonProps;
        /**
          * Gibt die Schrittweite der Wertveränderung an
         */
        "_step"?: number;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt an, ob es ein DateTime-, Date-, Month-, Week-, Time-, DateTime-Local-, Number-Eingabefeld ist.
         */
        "_type"?: InputNumberType;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: string;
    }
    interface KolInputPassword {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld autovervollständigt werden kann.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt an, wie viele Zeichen man maximal eingeben kann.
         */
        "_maxLength"?: number;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt ein Prüfpattern für das Eingabefeld an.
         */
        "_pattern"?: string;
        /**
          * Gibt den Platzhalter des Eingabefeldes an, wenn es leer ist.
         */
        "_placeholder"?: string;
        /**
          * Gibt an, ob die Eingabefeld nur lesend ist.
         */
        "_readOnly"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, wie viele Zeichen man eingeben kann.
         */
        "_size"?: number;
        /**
          * Ermöglicht einen Schalter ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (nur Icon-Only).
         */
        "_smartButton"?: ButtonProps;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: string;
    }
    interface KolInputRadio {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Optionen für das Eingabefeld an.
         */
        "_list": Stringified<Option<unknown>[]>;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt die Ausrichtung der LinkList an.
         */
        "_orientation"?: Orientation;
        /**
          * Gibt an, ob das Eingabefeld ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert der Radio an.
         */
        "_value"?: string;
    }
    interface KolInputRadioGroup {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Optionen für das Eingabefeld an.
         */
        "_list": Stringified<Option<unknown>[]>;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt die Ausrichtung der LinkList an.
         */
        "_orientation"?: Orientation;
        /**
          * Gibt an, ob das Eingabefeld ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert der Radio an.
         */
        "_value"?: string;
    }
    interface KolInputRange {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld autovervollständigt werden kann.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Vorschlagswörter an.
         */
        "_list"?: Stringified<Option<number>[]>;
        /**
          * Gibt den Maximalwert des Eingabefeldes an.
         */
        "_max"?: number;
        /**
          * Gibt den Minimalwert des Eingabefeldes an.
         */
        "_min"?: number;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt die Schrittweite der Wertveränderung an.
         */
        "_step"?: number;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: number;
    }
    interface KolInputText {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld autovervollständigt werden kann.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt die Liste der Vorschlagswörter an.
         */
        "_list"?: Stringified<string[]>;
        /**
          * Gibt an, wie viele Zeichen man maximal eingeben kann.
         */
        "_maxLength"?: number;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt ein Prüfpattern für das Eingabefeld an.
         */
        "_pattern"?: string;
        /**
          * Gibt den Platzhalter des Eingabefeldes an, wenn es leer ist.
         */
        "_placeholder"?: string;
        /**
          * Gibt an, ob die Eingabefeld nur lesend ist.
         */
        "_readOnly"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, wie viele Zeichen man eingeben kann.
         */
        "_size"?: number;
        /**
          * Ermöglicht einen Schalter ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (nur Icon-Only).
         */
        "_smartButton"?: ButtonProps;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt an, ob es ein Text-, Suche-, URL- oder Telefon-Eingabefeld ist.
         */
        "_type"?: InputTextType;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: string;
    }
    interface KolKolibri {
        /**
          * Gibt an, ob das Bild-Logo farblich animiert werden soll.
         */
        "_animate"?: boolean;
        /**
          * Gibt an, in welcher Farbe das Bild-Logo initial dargestellt werden soll.
         */
        "_color"?: string;
        /**
          * Gibt an, ob die Logo-Beschriftung angezeigt werden soll.
         */
        "_labeled"?: boolean;
    }
    interface KolLink {
        /**
          * Gibt an, welche Elemente kontrolliert werden.  (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Gibt an, welchen aktuellen Auswahlstatus der Link hat. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current)
         */
        "_ariaCurrent"?: AriaCurrent;
        /**
          * Gibt an, ob durch den Link etwas aufgeklappt wurde. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
         */
        "_ariaExpanded"?: boolean;
        /**
          * Gibt einen beschreibenden Text des Links an.  (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)
         */
        "_ariaLabel"?: string;
        /**
          * Gibt an, ob der Link gerade ausgewählt ist. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected)
         */
        "_ariaSelected"?: boolean;
        /**
          * Gibt an, ob der Link deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt an, ob der Link die gesamte zur Verfügung stehende Breite ausfüllt.
         */
        "_fill"?: boolean;
        /**
          * Gibt die Ziel-Url des Links an.
         */
        "_href"?: string;
        /**
          * Gibt den Class-Identifier eines Icons eine eingebunden Icofont an. (z.B. https://icofont.com/)
         */
        "_icon"?: KoliBriIconProp;
        /**
          * Gibt an, ob das Icon entweder links oder rechts dargestellt werden soll.
          * @deprecated
         */
        "_iconAlign"?: Alignment;
        /**
          * Gibt an, ob nur das Icon angezeigt wird.
         */
        "_iconOnly"?: boolean;
        /**
          * Gibt die EventCallback-Funktionen für den Link an.
         */
        "_on"?: LinkOnCallbacks;
        /**
          * Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)
         */
        "_part"?: string;
        /**
          * Gibt die ID eines DOM-Elements, zu dem gesprungen werden soll, aus.
         */
        "_selector"?: string;
        /**
          * Gibt an, ob der Link als Link oder Button dargestellt werden soll.
         */
        "_showAs"?: KoliBriButtonLinkShowAs;
        /**
          * Gibt an, ob der Link nur beim Fokus sichtbar ist.
         */
        "_stealth"?: boolean;
        /**
          * Definiert das Verhalten, bei dem der Link geöffnet werden soll.
         */
        "_target"?: LinkTarget;
        /**
          * Gibt die Beschreibung an, wenn der Link in einem anderen Programm geöffnet wird.
         */
        "_targetDescription"?: string;
        /**
          * Gibt an, ob der Tooltip entweder oben, rechts, unten oder links angezeigt werden soll.
         */
        "_tooltipAlign"?: TooltipAlignment;
        /**
          * Gibt an, ob die Links unterstrichen dargestellt werden.
         */
        "_underline"?: boolean;
        /**
          * Gibt den Verwendungsfall des Links an.
         */
        "_useCase"?: LinkUseCase;
    }
    interface KolLinkGroup {
        /**
          * Gibt den Text an, der die Navigation von anderen Navigationen differenziert.
         */
        "_ariaLabel": string;
        /**
          * Gibt die optionale Überschrift zur Link-Gruppe an.
         */
        "_heading"?: string;
        /**
          * Gibt die geordnete Liste der Seitenhierarchie in Links an.
         */
        "_level"?: HeadingLevel;
        /**
          * Gibt die geordnete Liste der Seitenhierarchie in Links an.
         */
        "_links": Stringified<NavLinkProps[]>;
        /**
          * Gibt den List-Style-Typen für ungeordnete Listen aus. Wird bei horizontalen LinkGroups als Trenner verwendet
         */
        "_listStyleType"?: ListStyleType;
        /**
          * @deprecated Wird mittels der Property _list-style-type automatisch gesteuert. Gibt an, ob eine Ordered- oder eine Unordered-List verwendet werden soll.
         */
        "_ordered"?: boolean;
        /**
          * Gibt die Ausrichtung der LinkList an.
         */
        "_orientation"?: Orientation;
    }
    interface KolLinkWc {
        /**
          * Gibt an, welche Elemente kontrolliert werden.  (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Gibt an, welchen aktuellen Auswahlstatus der Link hat. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current)
         */
        "_ariaCurrent"?: AriaCurrent;
        /**
          * Gibt an, ob durch den Link etwas aufgeklappt wurde. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
         */
        "_ariaExpanded"?: boolean;
        /**
          * Gibt einen beschreibenden Text des Links an.  (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)
         */
        "_ariaLabel"?: string;
        /**
          * Gibt an, ob der Link gerade ausgewählt ist. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected)
         */
        "_ariaSelected"?: boolean;
        /**
          * Gibt an, ob der Link deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt an, ob der Link die gesamte zur Verfügung stehende Breite ausfüllt.
         */
        "_fill"?: boolean;
        /**
          * Gibt die Ziel-Url des Links an.
         */
        "_href"?: string;
        /**
          * Gibt den Class-Identifier eines Icons eine eingebunden Icofont an. (z.B. https://icofont.com/)
         */
        "_icon"?: KoliBriIconProp;
        /**
          * Gibt an, ob das Icon entweder links oder rechts dargestellt werden soll.
          * @deprecated
         */
        "_iconAlign"?: Alignment;
        /**
          * Gibt an, ob nur das Icon angezeigt wird.
         */
        "_iconOnly"?: boolean;
        /**
          * Gibt die EventCallback-Funktionen für den Link an.
         */
        "_on"?: LinkOnCallbacks;
        /**
          * Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)
         */
        "_part"?: string;
        /**
          * Gibt die ID eines DOM-Elements, zu dem gesprungen werden soll, aus.
         */
        "_selector"?: string;
        /**
          * Gibt an, ob der Link als Link oder Button dargestellt werden soll.
         */
        "_showAs"?: KoliBriButtonLinkShowAs;
        /**
          * Gibt an, ob der Link nur beim Fokus sichtbar ist.
         */
        "_stealth"?: boolean;
        /**
          * Definiert das Verhalten, bei dem der Link geöffnet werden soll.
         */
        "_target"?: LinkTarget;
        /**
          * Gibt die Beschreibung an, wenn der Link in einem anderen Programm geöffnet wird.
         */
        "_targetDescription"?: string;
        /**
          * Gibt an, ob der Tooltip entweder oben, rechts, unten oder links angezeigt werden soll.
         */
        "_tooltipAlign"?: TooltipAlignment;
        /**
          * Gibt an, ob die Links unterstrichen dargestellt werden.
         */
        "_underline"?: boolean;
        /**
          * Gibt den Verwendungsfall des Links an.
         */
        "_useCase"?: LinkUseCase;
    }
    interface KolLogo {
        /**
          * Gibt die Abkürzung eines Ministeriums, eines Amts oder einer Bundesanstalt an.
          * @deprecated Verwende stattdessen das Property _org.
         */
        "_abbr"?: Bundesministerium | Bundesamt | Bundesanstalt;
        /**
          * Gibt die Abkürzung eines Ministeriums, eines Amts oder einer Bundesanstalt an.
         */
        "_org": Bundesministerium | Bundesamt | Bundesanstalt;
    }
    interface KolModal {
        /**
          * Gibt die Referenz auf das auslösende HTML-Element an, wodurch das Modal geöffnet wurde.
         */
        "_activeElement"?: HTMLElement | null;
        /**
          * Gibt den Text an, der die Navigation von anderen Navigationen differenziert.
         */
        "_ariaLabel": string;
        /**
          * Gibt die EventCallback-Function für das Schließen des Modals an.
         */
        "_on"?: KoliBriModalEventCallbacks;
        /**
          * Gibt an, ob das Modal angezeigt wird.
         */
        "_show"?: boolean;
        /**
          * Gibt an, wie breit der Anzeigebereich sein soll (<= max-width: 100%).
         */
        "_width"?: string;
    }
    interface KolNav {
        /**
          * Gibt den Wert von aria-current an, der bei dem aktuellen Kontext innerhalb der Navigation verwendet werden soll.
         */
        "_ariaCurrentValue"?: AriaCurrent;
        /**
          * Gibt den Text an, der die Navigation von anderen Navigationen differenziert.
         */
        "_ariaLabel": string;
        /**
          * Gibt an, ob Knoten in der Navigation zusammengeklappt werden können. Ist standardmäßig aktiv.
         */
        "_collapsible"?: boolean;
        /**
          * Gibt an, ob die Navigation kompakt angezeigt wird.
         */
        "_compact"?: boolean;
        /**
          * Gibt an, ob die Navigation eine zusätzliche Schaltfläche zum Aus- und Einklappen der Navigation anzeigen soll.
         */
        "_hasCompactButton"?: boolean;
        /**
          * Gibt die geordnete Liste der Seitenhierarchie an.
         */
        "_links": Stringified<NavLinkWithChildrenProps[]>;
        /**
          * Gibt die Ausrichtung der Navigation an.
         */
        "_orientation"?: Orientation;
        /**
          * Gibt an, welche Ausprägung der Button hat.
         */
        "_variant"?: KoliBriNavVariant;
    }
    interface KolPagination {
        /**
          * Gibt an, wie viele Seiten neben den am Rand liegenden Pfeil-Schaltern angezeigt werden sollen.
         */
        "_boundaryCount"?: number;
        /**
          * Gibt an, welche Custom-Class übergeben werden soll, wenn _variant="custom" gesetzt ist.
         */
        "_customClass"?: string;
        /**
          * Gibt an, welche Sprung-Schalter sichtbar sein sollen.
         */
        "_hasButtons"?: boolean | Stringified<PaginationHasButton>;
        /**
          * Gibt an, auf welche Callback-Events reagiert werden.
         */
        "_on": KoliBriPaginationButtonCallbacks;
        /**
          * Gibt an, welche Seite aktuell ausgewählt ist.
         */
        "_page": number;
        /**
          * Gibt an, wie viele Einträge pro Seite angezeigt werden.
         */
        "_pageSize"?: number;
        /**
          * Gibt an, welche Optionen für die Seitenlänge angeboten werden.
         */
        "_pageSizeOptions"?: Stringified<number[]>;
        /**
          * Gibt an, wie viele Seiten neben dem aktuell ausgewählten Seite angezeigt werden.
         */
        "_siblingCount"?: number;
        /**
          * Gibt an, ob der Tooltip oben, rechts, unten oder links angezeigt werden.
         */
        "_tooltipAlign"?: TooltipAlignment;
        /**
          * Gibt an, wie viele Einträge mit der Pagination gehandelt werden.
         */
        "_total": number;
        /**
          * Gibt an, welche Button-Variante verwendet werden soll.
         */
        "_variant"?: KoliBriButtonVariant;
    }
    interface KolProgress {
        /**
          * Gibt an, bei welchem Wert die Fortschrittsanzeige abgeschlossen ist.
         */
        "_max": number;
        /**
          * Gibt an, ob der Prozess als Balken oder Kreis dargestellt wird.
         */
        "_type"?: KoliBriProgressType;
        /**
          * Gibt die Einheit der Fortschrittswerte an.
         */
        "_unit"?: string;
        /**
          * Gibt an, wie weit die Anzeige fortgeschritten ist.
         */
        "_value": number;
    }
    interface KolSelect {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob eine individuelle Höhe übergeben werden soll.
         */
        "_height"?: string;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Ermöglicht das Anzeigen von Icons links und/oder rechts am Rand des Eingabefeldes.
         */
        "_icon"?: Stringified<KoliBriInputIcon>;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_list": Stringified<SelectOption<unknown>[]>;
        /**
          * Gibt an, ob mehrere Werte eingegeben werden können.
         */
        "_multiple"?: boolean;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt an, ob die Selectbox ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, wie viele Optionen im Drop-Down-Menü sichtbar sein sollen.
         */
        "_size"?: number;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: Stringified<unknown[]>;
    }
    interface KolSkipNav {
        /**
          * Gibt den Text an, der die Navigation von anderen Navigationen differenziert.
         */
        "_ariaLabel": string;
        /**
          * Ist die Liste der unsichtbaren Links.
         */
        "_links": Stringified<NavLinkProps[]>;
    }
    interface KolSpin {
        /**
          * Gibt an, ob die Ladeanzeige eingeblendet wird oder nicht.
         */
        "_show"?: boolean;
    }
    interface KolSymbol {
        /**
          * Gibt an, was der Screenreader ausgeben soll
         */
        "_ariaLabel": string;
        /**
          * Dieses Property gibt den String an der angezeigt werden soll.
         */
        "_symbol": string;
    }
    interface KolTable {
        /**
          * Gibt den  Titel oder eine Legende mit Erklärungen zur Tabelle an.
         */
        "_caption": string;
        /**
          * Gibt die Daten an, die für die Erstellung der Tabelle verwendet werden.
         */
        "_data": Stringified<KoliBriDataType[]>;
        /**
          * Gibt die horizontalen und vertikalen Header für die Tabelle an.
         */
        "_headers": Stringified<KoliBriTableHeaders>;
        /**
          * Gibt an, die minimale Breite der Tabelle an.
         */
        "_minWidth"?: string;
        /**
          * Gibt an, ob die Daten geteilt in Seiten angezeigt wird.
         */
        "_pagination"?: boolean | Stringified<KoliBriTablePaginationProps>;
    }
    interface KolTabs {
        /**
          * Gibt den Text an, der die Navigation von anderen Navigationen differenziert.
         */
        "_ariaLabel": string;
        /**
          * Gibt die Liste der Callback-Funktionen an, die auf Events aufgerufen werden sollen.
         */
        "_on"?: KoliBriTabsCallbacks;
        /**
          * Gibt an, welches Tab selektiert sein soll.
         */
        "_selected"?: number;
        /**
          * Gibt die geordnete Liste der Seitenhierarchie in Links an.
         */
        "_tabs": Stringified<TabButtonProps[]>;
    }
    interface KolTextarea {
        /**
          * Gibt an, mit welcher Tastenkombination man das Input auslösen oder fokussieren kann.
         */
        "_accessKey"?: string;
        /**
          * Gibt an, ob die Fehlermeldung vorgelesen werden soll, wenn es eine gibt.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld aktiviert oder deaktiviert ist.
         */
        "_disabled"?: boolean;
        /**
          * Gibt den Text für eine Fehlermeldung an.
         */
        "_error"?: string;
        /**
          * Gibt an, ob am unteren Rand des Eingabefeldes die Anzahl der Zeichen angezeigt werden soll.
         */
        "_hasCounter"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld kein sichtbares Label haben soll.
         */
        "_hideLabel"?: boolean;
        /**
          * Gibt den Text für eine Hinweistext an.
         */
        "_hint"?: string;
        /**
          * Gibt die technische ID des Eingabefeldes an.
         */
        "_id": string;
        /**
          * Gibt an, wie viele Zeichen man maximal eingeben kann.
         */
        "_maxLength"?: number;
        /**
          * Gibt den technischen Namen des Eingabefeldes an.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Gibt den Platzhalter des Eingabefeldes an, wenn es leer ist.
         */
        "_placeholder"?: string;
        /**
          * Gibt an, ob das Eingabefeld nur lesend ist.
         */
        "_readOnly"?: boolean;
        /**
          * Gibt an, ob das Eingabefeld ein Pflichtfeld ist.
         */
        "_required"?: boolean;
        /**
          * Gibt an, ob die Größe des Eingabefeldes geändert werden kann. (https://developer.mozilla.org/de/docs/Web/CSS/resize)
         */
        "_resize"?: CSSResize;
        /**
          * Gibt die Anzahl der anzuzeigenden Zeilen des Eingabefeldes an.
         */
        "_rows"?: number;
        /**
          * Gibt an, welchen Tab-Index dieses Input hat.
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Gibt den Wert des Eingabefeldes an.
         */
        "_value"?: string;
    }
    interface KolToast {
        /**
          * Gibt an, ob der Screenreader die Meldung vorlesen soll.
         */
        "_alert"?: boolean;
        /**
          * Gibt an, ob der Toast ein Schließen-Icon hat.
         */
        "_hasCloser"?: boolean;
        /**
          * Gibt den Titel der Meldung an.
         */
        "_heading"?: string;
        /**
          * Gibt an, welchen H-Level von 1 bis 6 die Überschrift hat.
         */
        "_level"?: HeadingLevel;
        /**
          * Gibt die EventCallback-Function für das Schließen des Toasts an.
         */
        "_on"?: KoliBriToastEventCallbacks;
        /**
          * Gibt an, ob der Toast eingeblendet wird.
         */
        "_show"?: boolean;
        /**
          * Gibt an, wie viele Millisekunden der Toast eingeblendet werden soll.
         */
        "_showDuration"?: number;
        /**
          * Gibt an, ob es sich um eine Erfolgs-, Info-, Warnung- oder Fehlermeldung handelt.
         */
        "_type"?: AlertType;
    }
    interface KolTooltip {
        /**
          * Gibt an, ob der Tooltip oben, rechts, unten oder links angezeigt werden soll.
         */
        "_align"?: TooltipAlignment;
        /**
          * Gibt die ID an, wenn z.B. Aria-Labelledby (Link) verwendet wird.
         */
        "_id"?: string;
        /**
          * Das Label gibt an, welcher Text in dem Tooltip beim Fokussieren oder Maus-drüberfahren angezeigt wird.
         */
        "_label": string;
    }
    interface KolVersion {
        /**
          * Gibt die Versionsnummer als Text an.
         */
        "_version": string;
    }
    interface IntrinsicElements {
        "kol-abbr": KolAbbr;
        "kol-accordion": KolAccordion;
        "kol-alert": KolAlert;
        "kol-badge": KolBadge;
        "kol-breadcrumb": KolBreadcrumb;
        "kol-button": KolButton;
        "kol-button-group": KolButtonGroup;
        "kol-button-wc": KolButtonWc;
        "kol-card": KolCard;
        "kol-color": KolColor;
        "kol-counter": KolCounter;
        "kol-details": KolDetails;
        "kol-form": KolForm;
        "kol-heading": KolHeading;
        "kol-heading-wc": KolHeadingWc;
        "kol-icon": KolIcon;
        "kol-icon-font-awesome": KolIconFontAwesome;
        "kol-icon-icofont": KolIconIcofont;
        "kol-indented-text": KolIndentedText;
        "kol-input": KolInput;
        "kol-input-adapter-leanup": KolInputAdapterLeanup;
        "kol-input-checkbox": KolInputCheckbox;
        "kol-input-color": KolInputColor;
        "kol-input-email": KolInputEmail;
        "kol-input-file": KolInputFile;
        "kol-input-number": KolInputNumber;
        "kol-input-password": KolInputPassword;
        "kol-input-radio": KolInputRadio;
        "kol-input-radio-group": KolInputRadioGroup;
        "kol-input-range": KolInputRange;
        "kol-input-text": KolInputText;
        "kol-kolibri": KolKolibri;
        "kol-link": KolLink;
        "kol-link-group": KolLinkGroup;
        "kol-link-wc": KolLinkWc;
        "kol-logo": KolLogo;
        "kol-modal": KolModal;
        "kol-nav": KolNav;
        "kol-pagination": KolPagination;
        "kol-progress": KolProgress;
        "kol-select": KolSelect;
        "kol-skip-nav": KolSkipNav;
        "kol-spin": KolSpin;
        "kol-symbol": KolSymbol;
        "kol-table": KolTable;
        "kol-tabs": KolTabs;
        "kol-textarea": KolTextarea;
        "kol-toast": KolToast;
        "kol-tooltip": KolTooltip;
        "kol-version": KolVersion;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kol-abbr": LocalJSX.KolAbbr & JSXBase.HTMLAttributes<HTMLKolAbbrElement>;
            "kol-accordion": LocalJSX.KolAccordion & JSXBase.HTMLAttributes<HTMLKolAccordionElement>;
            "kol-alert": LocalJSX.KolAlert & JSXBase.HTMLAttributes<HTMLKolAlertElement>;
            "kol-badge": LocalJSX.KolBadge & JSXBase.HTMLAttributes<HTMLKolBadgeElement>;
            "kol-breadcrumb": LocalJSX.KolBreadcrumb & JSXBase.HTMLAttributes<HTMLKolBreadcrumbElement>;
            "kol-button": LocalJSX.KolButton & JSXBase.HTMLAttributes<HTMLKolButtonElement>;
            "kol-button-group": LocalJSX.KolButtonGroup & JSXBase.HTMLAttributes<HTMLKolButtonGroupElement>;
            "kol-button-wc": LocalJSX.KolButtonWc & JSXBase.HTMLAttributes<HTMLKolButtonWcElement>;
            "kol-card": LocalJSX.KolCard & JSXBase.HTMLAttributes<HTMLKolCardElement>;
            "kol-color": LocalJSX.KolColor & JSXBase.HTMLAttributes<HTMLKolColorElement>;
            "kol-counter": LocalJSX.KolCounter & JSXBase.HTMLAttributes<HTMLKolCounterElement>;
            "kol-details": LocalJSX.KolDetails & JSXBase.HTMLAttributes<HTMLKolDetailsElement>;
            "kol-form": LocalJSX.KolForm & JSXBase.HTMLAttributes<HTMLKolFormElement>;
            "kol-heading": LocalJSX.KolHeading & JSXBase.HTMLAttributes<HTMLKolHeadingElement>;
            "kol-heading-wc": LocalJSX.KolHeadingWc & JSXBase.HTMLAttributes<HTMLKolHeadingWcElement>;
            "kol-icon": LocalJSX.KolIcon & JSXBase.HTMLAttributes<HTMLKolIconElement>;
            "kol-icon-font-awesome": LocalJSX.KolIconFontAwesome & JSXBase.HTMLAttributes<HTMLKolIconFontAwesomeElement>;
            "kol-icon-icofont": LocalJSX.KolIconIcofont & JSXBase.HTMLAttributes<HTMLKolIconIcofontElement>;
            "kol-indented-text": LocalJSX.KolIndentedText & JSXBase.HTMLAttributes<HTMLKolIndentedTextElement>;
            "kol-input": LocalJSX.KolInput & JSXBase.HTMLAttributes<HTMLKolInputElement>;
            "kol-input-adapter-leanup": LocalJSX.KolInputAdapterLeanup & JSXBase.HTMLAttributes<HTMLKolInputAdapterLeanupElement>;
            "kol-input-checkbox": LocalJSX.KolInputCheckbox & JSXBase.HTMLAttributes<HTMLKolInputCheckboxElement>;
            "kol-input-color": LocalJSX.KolInputColor & JSXBase.HTMLAttributes<HTMLKolInputColorElement>;
            "kol-input-email": LocalJSX.KolInputEmail & JSXBase.HTMLAttributes<HTMLKolInputEmailElement>;
            "kol-input-file": LocalJSX.KolInputFile & JSXBase.HTMLAttributes<HTMLKolInputFileElement>;
            "kol-input-number": LocalJSX.KolInputNumber & JSXBase.HTMLAttributes<HTMLKolInputNumberElement>;
            "kol-input-password": LocalJSX.KolInputPassword & JSXBase.HTMLAttributes<HTMLKolInputPasswordElement>;
            "kol-input-radio": LocalJSX.KolInputRadio & JSXBase.HTMLAttributes<HTMLKolInputRadioElement>;
            "kol-input-radio-group": LocalJSX.KolInputRadioGroup & JSXBase.HTMLAttributes<HTMLKolInputRadioGroupElement>;
            "kol-input-range": LocalJSX.KolInputRange & JSXBase.HTMLAttributes<HTMLKolInputRangeElement>;
            "kol-input-text": LocalJSX.KolInputText & JSXBase.HTMLAttributes<HTMLKolInputTextElement>;
            "kol-kolibri": LocalJSX.KolKolibri & JSXBase.HTMLAttributes<HTMLKolKolibriElement>;
            "kol-link": LocalJSX.KolLink & JSXBase.HTMLAttributes<HTMLKolLinkElement>;
            "kol-link-group": LocalJSX.KolLinkGroup & JSXBase.HTMLAttributes<HTMLKolLinkGroupElement>;
            "kol-link-wc": LocalJSX.KolLinkWc & JSXBase.HTMLAttributes<HTMLKolLinkWcElement>;
            "kol-logo": LocalJSX.KolLogo & JSXBase.HTMLAttributes<HTMLKolLogoElement>;
            "kol-modal": LocalJSX.KolModal & JSXBase.HTMLAttributes<HTMLKolModalElement>;
            "kol-nav": LocalJSX.KolNav & JSXBase.HTMLAttributes<HTMLKolNavElement>;
            "kol-pagination": LocalJSX.KolPagination & JSXBase.HTMLAttributes<HTMLKolPaginationElement>;
            "kol-progress": LocalJSX.KolProgress & JSXBase.HTMLAttributes<HTMLKolProgressElement>;
            "kol-select": LocalJSX.KolSelect & JSXBase.HTMLAttributes<HTMLKolSelectElement>;
            "kol-skip-nav": LocalJSX.KolSkipNav & JSXBase.HTMLAttributes<HTMLKolSkipNavElement>;
            "kol-spin": LocalJSX.KolSpin & JSXBase.HTMLAttributes<HTMLKolSpinElement>;
            "kol-symbol": LocalJSX.KolSymbol & JSXBase.HTMLAttributes<HTMLKolSymbolElement>;
            "kol-table": LocalJSX.KolTable & JSXBase.HTMLAttributes<HTMLKolTableElement>;
            "kol-tabs": LocalJSX.KolTabs & JSXBase.HTMLAttributes<HTMLKolTabsElement>;
            "kol-textarea": LocalJSX.KolTextarea & JSXBase.HTMLAttributes<HTMLKolTextareaElement>;
            "kol-toast": LocalJSX.KolToast & JSXBase.HTMLAttributes<HTMLKolToastElement>;
            "kol-tooltip": LocalJSX.KolTooltip & JSXBase.HTMLAttributes<HTMLKolTooltipElement>;
            "kol-version": LocalJSX.KolVersion & JSXBase.HTMLAttributes<HTMLKolVersionElement>;
        }
    }
}
