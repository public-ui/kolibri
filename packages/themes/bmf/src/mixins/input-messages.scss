@import './rem';

@mixin inputMessages {
	.kol-input {
		@include setInputMessageType(error, --color-red);
		@include setInputMessageType(msg-type-info, --color-midnight);
		@include setInputMessageType(msg-type-success, --color-green);
		@include setInputMessageType(msg-type-warning, --color-orange);
	}

	.msg {
		border-width: 0;
		background-color: transparent;
		align-items: start;

		.heading {
			place-items: flex-start;

			.heading-icon {
				place-self: baseline;
				padding-top: 0;
				place-items: baseline;

				&::part(icon) {
					line-height: 1.5;
				}
			}

			.heading-content {
				line-height: 1.5;
				align-self: center;
			}
		}

		@include setMsgHeadingColor(default, --color-grey);
		@include setMsgHeadingColor(error, --color-red);
		@include setMsgHeadingColor(info, --color-midnight);
		@include setMsgHeadingColor(success, --color-green);
		@include setMsgHeadingColor(warning, --color-orange);
	}

	.kol-alert-wc {
		display: flex;
		width: 100%;
		overflow: unset;

		> .heading {
			display: flex;
			gap: 0.5em;

			> div {
				display: grid;
				gap: var(--spacing);
				font-weight: 700;
			}
		}
	}

	.default {
		border-color: var(--color-grey);

		&.msg .heading-icon {
			color: var(--color-grey);
		}
	}

	@include setMsgType(error, red, error);
	@include setMsgType(info, midnight, info);
	@include setMsgType(success, green, check_circle);
	@include setMsgType(warning, orange, warning);

	.heading-icon {
		color: white;
		font-size: rem(20);

		&::part(icon) {
			font-family: 'Material Symbols Rounded';
			font-weight: 900;
			font-variation-settings: 'FILL' 1;
		}
	}
}

@mixin setMsgHeadingColor($type, $color) {
	&.#{$type} {
		.heading > div > .kol-heading-wc {
			color: var(#{$color});
		}
	}
}

@mixin setInputMessageType($type, $color) {
	&.#{$type} {
		.input {
			border-color: var(#{$color});
			border-width: rem(3);

			&:hover {
				border-color: var(--color-midnight);
			}
		}

		&:not(.hidden-error) {
			padding-left: 1em;
			border-left: rem(3) solid var(#{$color});
		}
	}
}

@mixin setMsgType($type, $color, $icon) {
	.#{$type},
	.msg-type-#{$type} {
		border-color: var(--color-#{$color});
		color: var(--color-#{$color});

		&.msg .heading-icon {
			color: var(--color-#{$color});
		}

		.heading-icon::part(icon)::before {
			content: '#{$icon}';
		}
	}
}
